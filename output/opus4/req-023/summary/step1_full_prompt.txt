# üìú Strict HLJ Summary & Structure Planning Prompt (Upgraded JSON Version)

> **Parameter:** `MAX_CHUNK_SIZE = 10`

You are a **software-requirements architect** tasked with analyzing a complex stakeholder document and planning its conversion into **High-Level JSON (HLJ)** items.

---

## üõ†Ô∏è  Global Hard Rules

1. **Length cap** ‚Äì The summary must be **‚â§‚ÄØ40% of the original character count or ‚â§‚ÄØ400 tokens**, whichever is *smaller*.
2. **Fence markers** ‚Äì **Wrap each section with the exact regex-friendly fences below.** *Do not alter them.*
3. **Atomicity** ‚Äì HLJ preview items must describe *one* clear action/output (e.g., ‚ÄúDesign `POST /users/signup` endpoint‚Äù). Vague entries like ‚ÄúDo stuff‚Äù are forbidden.
4. **Line-number provenance** ‚Äì Include source line/paragraph numbers in `"line_source": "Ln X‚ÄìY"`. If the source span is unclear, use `"line_source": "(unknown)"`.
5. **Fail-loud quota** ‚Äì If you cannot meet any numeric constraint or required field, output the token `!!CONSTRAINT_BROKEN!!` at the end of the relevant section.
6. **Hallucination flag** ‚Äì Any feature or detail *not* found in the raw text must be prefixed with `[EXTRA]`.
7. **Non-functional checklist** ‚Äì Explicitly check for and preserve cues about **performance, security, scalability, usability, compliance/regulation, availability, maintainability** as appropriate.

---

## üîπ Step‚ÄØ1 ‚Äì Summary Generation

Generate a **structured, developer-friendly summary** that respects Rules‚ÄØ1‚Äì7.
*Preserve all functional & non-functional aspects, dates, deadlines, dependencies, regulations, stakeholder priorities, and critical terminology.*

---

## üîπ Step‚ÄØ2 ‚Äì HLJ Structure Planning (JSON Format)

* **Do *not* generate full HLJs yet.**
* Estimate the **total number of atomic HLJ items**.
* If the count exceeds `MAX_CHUNK_SIZE`, split the preview list into sequential **chunks of MAX\_CHUNK\_SIZE items** and assign each chunk a focus.
* For **each HLJ preview item**, produce a JSON object with:

  * `"id"`
  * `"title"` (1-line, atomic)
  * `"domain"`
  * `"subdomain"` (list)
  * `"tags"` (max 3, canonical, lowercase)
  * `"difficulty"` ("low" | "medium" | "high")
  * `"priority"` ("low" | "medium" | "high")
  * `"line_source"` (e.g., "Ln 10‚Äì13")
  * (Optional: `"chunk"` and `"chunk_focus"` for easier grouping)

*Assign IDs using this pattern: `REQ-023-HLJ-Chunk_<chunk#>-Item_<item#>-v1.0`.*

---

## ‚úÖ  Required Output Format (**fences must stay verbatim**)

### === SUMMARY START ===

{
  "requirement_id": "REQ-023",
  "summary": "<your summary here>"
}

### === SUMMARY END ===

### === HLJ\_META START ===

{
  "domain": "<Domain>",                 // e.g., "FinTech"
  "subdomain": ["<Subdomain1>", ...],   // e.g., ["CustomerOnboarding"]
  "canonical_tags": ["tag1", "tag2"],   // up to 3 tags
  "difficulty": "<low|medium|high>",
  "priority": "<low|medium|high>"
}

### === HLJ\_META END ===

### === HLJ\_PLAN START ===

{
  "estimated_hlj_count": <integer>,
  "chunk_count": <integer>,
  "chunks": [
    {
      "chunk_id": "REQ-023-HLJ-Chunk_<chunk#>",
      "focus": "<focus string or 'unknown'>",
      "items": [
        {
          "id": "REQ-023-HLJ-Chunk_<chunk#>-Item_<item#>-v1.0",
          "title": "<atomic 1-line title>",
          "domain": "<Domain>",
          "subdomain": ["<Subdomain1>", ...],
          "tags": ["tag1", "tag2"],
          "difficulty": "<low|medium|high>",
          "priority": "<low|medium|high>",
          "line_source": "Ln XX‚ÄìYY"
        }
        // ... more items for this chunk
      ]
    }
    // ... more chunks as needed
  ]
}

### === HLJ\_PLAN END ===

*If any rule is violated or information is missing ‚áí append `!!CONSTRAINT_BROKEN!!` on a new line.*

---

## üî∏  Input Placeholder

```
# Requirement req-023 (SaaS)

SA-008: Geo-Targeted Feature Flag Rollouts With Real-Time Analytics
Title:
Geo-Targeted Feature Flag Rollouts Leveraging Real-Time Analytics for Progressive Delivery

Executive Summary:
As part of our ongoing initiative to embrace progressive delivery and drive customer-centric innovation, we require the ability to roll out new features to targeted user segments based on geographic location, with integrated real-time analytics for performance monitoring and rapid rollback. This capability will support A/B testing, risk mitigation, and personalized product experiences, accelerating our time-to-value across global markets.

Requirements:

Feature Flag Framework:

Implement a scalable feature flag system that supports user segmentation by country, region, and city.

Allow percentage-based rollouts (e.g., release to 10% of users in Canada, 100% in the UK).

Flags must be dynamically adjustable via an admin portal, with immediate effect across the platform.

Geo-IP and Segmentation:

Integrate with a real-time Geo-IP resolution service to determine user location at the point of feature evaluation.

Include robust handling for users on VPNs, proxies, or with missing/ambiguous geo-data (e.g., fallback to global defaults).

Real-Time Analytics & Observability:

Provide dashboards displaying adoption metrics, error rates, and conversion KPIs by geography and cohort.

Trigger automated alerts for negative impact (e.g., spike in errors or support tickets in a region) and allow one-click rollback.

User Experience and Compliance:

Inform users if they are part of a beta or staged rollout, including opt-out options where applicable.

Ensure all geo-targeted delivery respects regional data residency and privacy laws (e.g., GDPR, CCPA).

Edge Case Handling:

In case of Geo-IP mismatch (e.g., mobile users crossing borders), flag feature toggling events for audit and analytics.

Rollback must revert changes instantly, with full traceability.

Documentation & Enablement:

Create onboarding material for product managers and developers on setting up and analyzing feature flags.

Maintain a change log of all flag adjustments, rollouts, and rollbacks for compliance audits.

Dependencies & Constraints:

Requires upgrade of authentication and session services for location awareness.

Analytics and logging must integrate with existing BI stack (e.g., Snowflake, Looker).

KPIs:

Rollback time under 30 seconds

<0.2% error rate during rollout

Feature adoption per geo-segment within first 72 hours


```

**Respond only with text enclosed by the fences above. Do not include any extra commentary or explanation. If information is missing or ambiguous, use `"unknown"` for the value.**
