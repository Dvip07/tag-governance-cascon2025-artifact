# üìú Strict HLJ Summary & Structure Planning Prompt (Upgraded JSON Version)

> **Parameter:** `MAX_CHUNK_SIZE = 10`

You are a **software-requirements architect** tasked with analyzing a complex stakeholder document and planning its conversion into **High-Level JSON (HLJ)** items.

---

## üõ†Ô∏è  Global Hard Rules

1. **Length cap** ‚Äì The summary must be **‚â§‚ÄØ40% of the original character count or ‚â§‚ÄØ400 tokens**, whichever is *smaller*.
2. **Fence markers** ‚Äì **Wrap each section with the exact regex-friendly fences below.** *Do not alter them.*
3. **Atomicity** ‚Äì HLJ preview items must describe *one* clear action/output (e.g., ‚ÄúDesign `POST /users/signup` endpoint‚Äù). Vague entries like ‚ÄúDo stuff‚Äù are forbidden.
4. **Line-number provenance** ‚Äì Include source line/paragraph numbers in `"line_source": "Ln X‚ÄìY"`. If the source span is unclear, use `"line_source": "(unknown)"`.
5. **Fail-loud quota** ‚Äì If you cannot meet any numeric constraint or required field, output the token `!!CONSTRAINT_BROKEN!!` at the end of the relevant section.
6. **Hallucination flag** ‚Äì Any feature or detail *not* found in the raw text must be prefixed with `[EXTRA]`.
7. **Non-functional checklist** ‚Äì Explicitly check for and preserve cues about **performance, security, scalability, usability, compliance/regulation, availability, maintainability** as appropriate.

---

## üîπ Step‚ÄØ1 ‚Äì Summary Generation

Generate a **structured, developer-friendly summary** that respects Rules‚ÄØ1‚Äì7.
*Preserve all functional & non-functional aspects, dates, deadlines, dependencies, regulations, stakeholder priorities, and critical terminology.*

---

## üîπ Step‚ÄØ2 ‚Äì HLJ Structure Planning (JSON Format)

* **Do *not* generate full HLJs yet.**
* Estimate the **total number of atomic HLJ items**.
* If the count exceeds `MAX_CHUNK_SIZE`, split the preview list into sequential **chunks of MAX\_CHUNK\_SIZE items** and assign each chunk a focus.
* For **each HLJ preview item**, produce a JSON object with:

  * `"id"`
  * `"title"` (1-line, atomic)
  * `"domain"`
  * `"subdomain"` (list)
  * `"tags"` (max 3, canonical, lowercase)
  * `"difficulty"` ("low" | "medium" | "high")
  * `"priority"` ("low" | "medium" | "high")
  * `"line_source"` (e.g., "Ln 10‚Äì13")
  * (Optional: `"chunk"` and `"chunk_focus"` for easier grouping)

*Assign IDs using this pattern: `REQ-006-HLJ-Chunk_<chunk#>-Item_<item#>-v1.0`.*

---

## ‚úÖ  Required Output Format (**fences must stay verbatim**)

### === SUMMARY START ===

{
  "requirement_id": "REQ-006",
  "summary": "<your summary here>"
}

### === SUMMARY END ===

### === HLJ\_META START ===

{
  "domain": "<Domain>",                 // e.g., "FinTech"
  "subdomain": ["<Subdomain1>", ...],   // e.g., ["CustomerOnboarding"]
  "canonical_tags": ["tag1", "tag2"],   // up to 3 tags
  "difficulty": "<low|medium|high>",
  "priority": "<low|medium|high>"
}

### === HLJ\_META END ===

### === HLJ\_PLAN START ===

{
  "estimated_hlj_count": <integer>,
  "chunk_count": <integer>,
  "chunks": [
    {
      "chunk_id": "REQ-006-HLJ-Chunk_<chunk#>",
      "focus": "<focus string or 'unknown'>",
      "items": [
        {
          "id": "REQ-006-HLJ-Chunk_<chunk#>-Item_<item#>-v1.0",
          "title": "<atomic 1-line title>",
          "domain": "<Domain>",
          "subdomain": ["<Subdomain1>", ...],
          "tags": ["tag1", "tag2"],
          "difficulty": "<low|medium|high>",
          "priority": "<low|medium|high>",
          "line_source": "Ln XX‚ÄìYY"
        }
        // ... more items for this chunk
      ]
    }
    // ... more chunks as needed
  ]
}

### === HLJ\_PLAN END ===

*If any rule is violated or information is missing ‚áí append `!!CONSTRAINT_BROKEN!!` on a new line.*

---

## üî∏  Input Placeholder

```
# Requirement req-006 (FinTech)

FT-006: Per-Tenant API Rate Limits for B2B Developer Platform
Title:
Implementation of Per-Tenant API Rate Limiting for B2B Developer Platform

Background & Business Objective:
As the developer platform expands to support a growing number of B2B clients, ensuring fair usage and stability of shared APIs becomes increasingly critical. Current system-wide rate limiting does not adequately address the risk of a single tenant monopolizing resources or causing service degradation for others. Implementing fine-grained, per-tenant rate limiting is essential to uphold performance SLAs, prevent abuse, and improve transparency for clients integrating with our APIs.

This requirement outlines the need to introduce scalable, configurable per-tenant API rate limits for all external developer APIs, enabling granular control and monitoring at the tenant (customer organization) level.

Scope of Requirement:

Rate Limiting Design & Configuration:

Define and implement configurable rate limit tiers per tenant (e.g., Standard: 1000 req/min; Premium: 5000 req/min), with the ability to customize limits based on contract terms.

Support both burst (short-term spike) and sustained (long-term average) rate limits, with clear, documented fallback behavior if limits are exceeded.

Allow for real-time updates to tenant rate limit configurations via an internal admin portal.

API Gateway & Enforcement:

Integrate rate limiting logic at the API gateway or ingress controller layer, ensuring all inbound requests are checked and counted per tenant ID.

Provide instant feedback to clients when limits are approached or exceeded (HTTP 429 with reason details), and include ‚Äúretry-after‚Äù headers for compliant backoff.

All rate limiting actions and breaches must be logged per tenant for compliance and monitoring.

Monitoring, Alerting, & Reporting:

Implement dashboards and alerting mechanisms to notify both internal teams and affected tenants of rate limit breaches, near-misses, and unusual activity patterns.

Expose per-tenant usage metrics via API and/or developer portal, allowing clients to self-monitor their consumption and plan for scaling needs.

Generate monthly usage and rate limit breach reports for billing, compliance, and support analysis.

Edge Case & Abuse Handling:

Detect and mitigate attempts to circumvent limits (e.g., using multiple API keys, rotating IPs, or automated bots).

Provide mechanisms to temporarily lift limits for incident response or high-priority support cases, with audit logs and auto-reversion to normal limits.

Handle API gateway outages or rate limiter backend failures gracefully, defaulting to system-wide limits if tenant context is unavailable.

Security & Compliance:

Ensure all rate limiting logic is resilient to spoofing of tenant IDs or credentials.

All rate limit configuration changes must require multi-factor approval for high-tier tenants and be fully auditable.

Testing, Rollout & Support:

Conduct phased rollout by tenant segment, beginning with low-risk tenants and gradually expanding coverage.

Provide sandbox environments for clients to test behavior under new rate limits.

Update developer documentation and FAQs to clearly explain new rate limit policies and self-service tools.

Dependencies & Constraints:

Requires upgrade of current API gateway infrastructure; legacy APIs must be retrofitted or phased out.

Must not add more than 10ms latency per API call under peak loads.

Coordination required with legal and customer success teams for communication and contract updates.

Deliverables:

Updated gateway and backend systems

Rate limit management UI

Monitoring dashboards

Rollout and migration plan

Communication templates for clients
```

**Respond only with text enclosed by the fences above. Do not include any extra commentary or explanation. If information is missing or ambiguous, use `"unknown"` for the value.**
