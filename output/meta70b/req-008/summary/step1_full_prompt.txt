# üìú Strict HLJ Summary & Structure Planning Prompt (Upgraded JSON Version)

> **Parameter:** `MAX_CHUNK_SIZE = 10`

You are a **software-requirements architect** tasked with analyzing a complex stakeholder document and planning its conversion into **High-Level JSON (HLJ)** items.

---

## üõ†Ô∏è  Global Hard Rules

1. **Length cap** ‚Äì The summary must be **‚â§‚ÄØ40% of the original character count or ‚â§‚ÄØ400 tokens**, whichever is *smaller*.
2. **Fence markers** ‚Äì **Wrap each section with the exact regex-friendly fences below.** *Do not alter them.*
3. **Atomicity** ‚Äì HLJ preview items must describe *one* clear action/output (e.g., ‚ÄúDesign `POST /users/signup` endpoint‚Äù). Vague entries like ‚ÄúDo stuff‚Äù are forbidden.
4. **Line-number provenance** ‚Äì Include source line/paragraph numbers in `"line_source": "Ln X‚ÄìY"`. If the source span is unclear, use `"line_source": "(unknown)"`.
5. **Fail-loud quota** ‚Äì If you cannot meet any numeric constraint or required field, output the token `!!CONSTRAINT_BROKEN!!` at the end of the relevant section.
6. **Hallucination flag** ‚Äì Any feature or detail *not* found in the raw text must be prefixed with `[EXTRA]`.
7. **Non-functional checklist** ‚Äì Explicitly check for and preserve cues about **performance, security, scalability, usability, compliance/regulation, availability, maintainability** as appropriate.

---

## üîπ Step‚ÄØ1 ‚Äì Summary Generation

Generate a **structured, developer-friendly summary** that respects Rules‚ÄØ1‚Äì7.
*Preserve all functional & non-functional aspects, dates, deadlines, dependencies, regulations, stakeholder priorities, and critical terminology.*

---

## üîπ Step‚ÄØ2 ‚Äì HLJ Structure Planning (JSON Format)

* **Do *not* generate full HLJs yet.**
* Estimate the **total number of atomic HLJ items**.
* If the count exceeds `MAX_CHUNK_SIZE`, split the preview list into sequential **chunks of MAX\_CHUNK\_SIZE items** and assign each chunk a focus.
* For **each HLJ preview item**, produce a JSON object with:

  * `"id"`
  * `"title"` (1-line, atomic)
  * `"domain"`
  * `"subdomain"` (list)
  * `"tags"` (max 3, canonical, lowercase)
  * `"difficulty"` ("low" | "medium" | "high")
  * `"priority"` ("low" | "medium" | "high")
  * `"line_source"` (e.g., "Ln 10‚Äì13")
  * (Optional: `"chunk"` and `"chunk_focus"` for easier grouping)

*Assign IDs using this pattern: `REQ-008-HLJ-Chunk_<chunk#>-Item_<item#>-v1.0`.*

---

## ‚úÖ  Required Output Format (**fences must stay verbatim**)

### === SUMMARY START ===

{
  "requirement_id": "REQ-008",
  "summary": "<your summary here>"
}

### === SUMMARY END ===

### === HLJ\_META START ===

{
  "domain": "<Domain>",                 // e.g., "FinTech"
  "subdomain": ["<Subdomain1>", ...],   // e.g., ["CustomerOnboarding"]
  "canonical_tags": ["tag1", "tag2"],   // up to 3 tags
  "difficulty": "<low|medium|high>",
  "priority": "<low|medium|high>"
}

### === HLJ\_META END ===

### === HLJ\_PLAN START ===

{
  "estimated_hlj_count": <integer>,
  "chunk_count": <integer>,
  "chunks": [
    {
      "chunk_id": "REQ-008-HLJ-Chunk_<chunk#>",
      "focus": "<focus string or 'unknown'>",
      "items": [
        {
          "id": "REQ-008-HLJ-Chunk_<chunk#>-Item_<item#>-v1.0",
          "title": "<atomic 1-line title>",
          "domain": "<Domain>",
          "subdomain": ["<Subdomain1>", ...],
          "tags": ["tag1", "tag2"],
          "difficulty": "<low|medium|high>",
          "priority": "<low|medium|high>",
          "line_source": "Ln XX‚ÄìYY"
        }
        // ... more items for this chunk
      ]
    }
    // ... more chunks as needed
  ]
}

### === HLJ\_PLAN END ===

*If any rule is violated or information is missing ‚áí append `!!CONSTRAINT_BROKEN!!` on a new line.*

---

## üî∏  Input Placeholder

```
# Requirement req-008 (FinTech)

FT-008: Automated Loan Eligibility for Gig Workers
Title:
Automated Loan Origination Workflow for Gig Economy Workers Using Platform API Data

Background & Objective:
Traditional credit assessment models often exclude gig economy workers who lack formal pay stubs or standard employment history, despite having steady income across multiple platforms. The goal of this requirement is to design and deploy a loan origination workflow that leverages platform API integrations to aggregate, verify, and assess the income of gig workers for personal loan eligibility. This enhancement supports financial inclusion goals and opens new revenue streams.

Scope of Requirement:

API Integrations:

Build and maintain integrations with major gig economy platforms (e.g., Uber, DoorDash, Upwork, Fiverr) to retrieve earnings data with user consent.

Support aggregation of income from multiple platforms and ensure normalization of data formats (e.g., different period cycles, currencies).

Eligibility Logic:

Define a dynamic set of eligibility rules for gig income, considering income volatility, recency, and consistency.

Allow rules to be adjusted via an admin portal for rapid response to market or regulatory changes.

Clearly handle edge cases, such as users with zero earnings in the last 30 days, or income in non-supported currencies.

KYC & Fraud Checks:

Require completion of standard KYC and AML screening for all applicants, with enhanced checks for identity and employment verification.

Implement fraud detection logic to flag artificially inflated income (e.g., self-generated or anomalous transactions).

User Experience:

Guide users through the data connection process, providing clear consent flows and feedback on successful/failed connections.

Display a summary of imported earnings and allow users to dispute or provide additional documentation.

Compliance & Security:

Comply with local lending regulations, privacy laws, and fair lending practices.

Secure all data transmissions and storage, using encryption and role-based access controls.

Monitoring & Reporting:

Provide dashboards for operations and compliance teams to monitor application volume, approval rates, and exception cases.

Log all API calls, eligibility checks, and manual interventions for audit purposes.

Edge Case Handling:

Users with income from unsupported platforms should receive clear next steps or alternative application routes.

Handle cases where platforms provide incomplete data, triggering manual review.

Dependencies & Constraints:

Requires legal agreements with gig economy platforms for data access.

Must coordinate with Credit Risk and Data Science for rule refinement and scoring logic.

The loan product must be clearly marketed as ‚Äúgig income eligible.‚Äù

Deliverables:

Loan origination workflow UI/UX

API integrations and documentation

Eligibility engine with admin controls

Compliance, audit, and monitoring dashboards

Training guides for support and underwriting teams


```

**Respond only with text enclosed by the fences above. Do not include any extra commentary or explanation. If information is missing or ambiguous, use `"unknown"` for the value.**
